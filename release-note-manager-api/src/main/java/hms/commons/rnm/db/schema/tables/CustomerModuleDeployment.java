/*
 * This file is generated by jOOQ.
 */
package hms.commons.rnm.db.schema.tables;


import hms.commons.rnm.db.schema.DefaultSchema;
import hms.commons.rnm.db.schema.Indexes;
import hms.commons.rnm.db.schema.Keys;
import hms.commons.rnm.db.schema.tables.records.CustomerModuleDeploymentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomerModuleDeployment extends TableImpl<CustomerModuleDeploymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>customer_module_deployment</code>
     */
    public static final CustomerModuleDeployment CUSTOMER_MODULE_DEPLOYMENT = new CustomerModuleDeployment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerModuleDeploymentRecord> getRecordType() {
        return CustomerModuleDeploymentRecord.class;
    }

    /**
     * The column <code>customer_module_deployment.customer_id</code>.
     */
    public final TableField<CustomerModuleDeploymentRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>customer_module_deployment.module_id</code>.
     */
    public final TableField<CustomerModuleDeploymentRecord, Integer> MODULE_ID = createField(DSL.name("module_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>customer_module_deployment.created_date</code>.
     */
    public final TableField<CustomerModuleDeploymentRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>customer_module_deployment.last_updated_time</code>.
     */
    public final TableField<CustomerModuleDeploymentRecord, LocalDateTime> LAST_UPDATED_TIME = createField(DSL.name("last_updated_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>customer_module_deployment.id</code>.
     */
    public final TableField<CustomerModuleDeploymentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    private CustomerModuleDeployment(Name alias, Table<CustomerModuleDeploymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomerModuleDeployment(Name alias, Table<CustomerModuleDeploymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>customer_module_deployment</code> table reference
     */
    public CustomerModuleDeployment(String alias) {
        this(DSL.name(alias), CUSTOMER_MODULE_DEPLOYMENT);
    }

    /**
     * Create an aliased <code>customer_module_deployment</code> table reference
     */
    public CustomerModuleDeployment(Name alias) {
        this(alias, CUSTOMER_MODULE_DEPLOYMENT);
    }

    /**
     * Create a <code>customer_module_deployment</code> table reference
     */
    public CustomerModuleDeployment() {
        this(DSL.name("customer_module_deployment"), null);
    }

    public <O extends Record> CustomerModuleDeployment(Table<O> child, ForeignKey<O, CustomerModuleDeploymentRecord> key) {
        super(child, key, CUSTOMER_MODULE_DEPLOYMENT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMER_MODULE_DEPLOYMENT_CUSTOMER_ID, Indexes.CUSTOMER_MODULE_DEPLOYMENT_MODULE_ID);
    }

    @Override
    public Identity<CustomerModuleDeploymentRecord, Integer> getIdentity() {
        return (Identity<CustomerModuleDeploymentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CustomerModuleDeploymentRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMER_MODULE_DEPLOYMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<CustomerModuleDeploymentRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerModuleDeploymentRecord>>asList(Keys.KEY_CUSTOMER_MODULE_DEPLOYMENT_PRIMARY);
    }

    @Override
    public List<ForeignKey<CustomerModuleDeploymentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CustomerModuleDeploymentRecord, ?>>asList(Keys.CUSTOMER_MODULE_DEPLOYMENT_IBFK_1, Keys.CUSTOMER_MODULE_DEPLOYMENT_IBFK_2);
    }

    public Customer customer() {
        return new Customer(this, Keys.CUSTOMER_MODULE_DEPLOYMENT_IBFK_1);
    }

    public Module module() {
        return new Module(this, Keys.CUSTOMER_MODULE_DEPLOYMENT_IBFK_2);
    }

    @Override
    public CustomerModuleDeployment as(String alias) {
        return new CustomerModuleDeployment(DSL.name(alias), this);
    }

    @Override
    public CustomerModuleDeployment as(Name alias) {
        return new CustomerModuleDeployment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerModuleDeployment rename(String name) {
        return new CustomerModuleDeployment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerModuleDeployment rename(Name name) {
        return new CustomerModuleDeployment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
