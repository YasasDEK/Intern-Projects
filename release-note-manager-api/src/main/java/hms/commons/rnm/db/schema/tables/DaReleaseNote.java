/*
 * This file is generated by jOOQ.
 */
package hms.commons.rnm.db.schema.tables;


import hms.commons.rnm.db.schema.DefaultSchema;
import hms.commons.rnm.db.schema.Keys;
import hms.commons.rnm.db.schema.tables.records.DaReleaseNoteRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DaReleaseNote extends TableImpl<DaReleaseNoteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>da_release_note</code>
     */
    public static final DaReleaseNote DA_RELEASE_NOTE = new DaReleaseNote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DaReleaseNoteRecord> getRecordType() {
        return DaReleaseNoteRecord.class;
    }

    /**
     * The column <code>da_release_note.id</code>.
     */
    public final TableField<DaReleaseNoteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>da_release_note.tag_id</code>.
     */
    public final TableField<DaReleaseNoteRecord, Integer> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>da_release_note.customer_id</code>.
     */
    public final TableField<DaReleaseNoteRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>da_release_note.artifact_location</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> ARTIFACT_LOCATION = createField(DSL.name("artifact_location"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>da_release_note.mdsum</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> MDSUM = createField(DSL.name("mdsum"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.tested_areas</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> TESTED_AREAS = createField(DSL.name("tested_areas"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.new_features</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> NEW_FEATURES = createField(DSL.name("new_features"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.found_bugs</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> FOUND_BUGS = createField(DSL.name("found_bugs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.fixed_bugs</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> FIXED_BUGS = createField(DSL.name("fixed_bugs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.know_bugs</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> KNOW_BUGS = createField(DSL.name("know_bugs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.limitations</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> LIMITATIONS = createField(DSL.name("limitations"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.modules_released</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> MODULES_RELEASED = createField(DSL.name("modules_released"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.prerequisits</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> PREREQUISITS = createField(DSL.name("prerequisits"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.deploy_instructions</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> DEPLOY_INSTRUCTIONS = createField(DSL.name("deploy_instructions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.patch_instructions</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> PATCH_INSTRUCTIONS = createField(DSL.name("patch_instructions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.areas_to_be_tested</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> AREAS_TO_BE_TESTED = createField(DSL.name("areas_to_be_tested"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.released_date</code>.
     */
    public final TableField<DaReleaseNoteRecord, LocalDate> RELEASED_DATE = createField(DSL.name("released_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>da_release_note.released_by</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> RELEASED_BY = createField(DSL.name("released_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>da_release_note.tested_by</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> TESTED_BY = createField(DSL.name("tested_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>da_release_note.test_cases</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> TEST_CASES = createField(DSL.name("test_cases"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>da_release_note.planned_start</code>.
     */
    public final TableField<DaReleaseNoteRecord, LocalDate> PLANNED_START = createField(DSL.name("planned_start"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>da_release_note.planned_end</code>.
     */
    public final TableField<DaReleaseNoteRecord, LocalDate> PLANNED_END = createField(DSL.name("planned_end"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>da_release_note.actual_start</code>.
     */
    public final TableField<DaReleaseNoteRecord, LocalDate> ACTUAL_START = createField(DSL.name("actual_start"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>da_release_note.actual_end</code>.
     */
    public final TableField<DaReleaseNoteRecord, LocalDate> ACTUAL_END = createField(DSL.name("actual_end"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>da_release_note.created_date</code>.
     */
    public final TableField<DaReleaseNoteRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>da_release_note.last_updated_time</code>.
     */
    public final TableField<DaReleaseNoteRecord, LocalDateTime> LAST_UPDATED_TIME = createField(DSL.name("last_updated_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>da_release_note.type</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>da_release_note.comment</code>.
     */
    public final TableField<DaReleaseNoteRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    private DaReleaseNote(Name alias, Table<DaReleaseNoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private DaReleaseNote(Name alias, Table<DaReleaseNoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>da_release_note</code> table reference
     */
    public DaReleaseNote(String alias) {
        this(DSL.name(alias), DA_RELEASE_NOTE);
    }

    /**
     * Create an aliased <code>da_release_note</code> table reference
     */
    public DaReleaseNote(Name alias) {
        this(alias, DA_RELEASE_NOTE);
    }

    /**
     * Create a <code>da_release_note</code> table reference
     */
    public DaReleaseNote() {
        this(DSL.name("da_release_note"), null);
    }

    public <O extends Record> DaReleaseNote(Table<O> child, ForeignKey<O, DaReleaseNoteRecord> key) {
        super(child, key, DA_RELEASE_NOTE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DaReleaseNoteRecord, Integer> getIdentity() {
        return (Identity<DaReleaseNoteRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DaReleaseNoteRecord> getPrimaryKey() {
        return Keys.KEY_DA_RELEASE_NOTE_PRIMARY;
    }

    @Override
    public List<UniqueKey<DaReleaseNoteRecord>> getKeys() {
        return Arrays.<UniqueKey<DaReleaseNoteRecord>>asList(Keys.KEY_DA_RELEASE_NOTE_PRIMARY);
    }

    @Override
    public DaReleaseNote as(String alias) {
        return new DaReleaseNote(DSL.name(alias), this);
    }

    @Override
    public DaReleaseNote as(Name alias) {
        return new DaReleaseNote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DaReleaseNote rename(String name) {
        return new DaReleaseNote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DaReleaseNote rename(Name name) {
        return new DaReleaseNote(name, null);
    }
}
