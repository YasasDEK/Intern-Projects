/*
 * This file is generated by jOOQ.
 */
package hms.commons.rnm.db.schema.tables;


import hms.commons.rnm.db.schema.DefaultSchema;
import hms.commons.rnm.db.schema.Keys;
import hms.commons.rnm.db.schema.enums.ModuleDeploymentsStatus;
import hms.commons.rnm.db.schema.tables.records.ModuleDeploymentsRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModuleDeployments extends TableImpl<ModuleDeploymentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>module_deployments</code>
     */
    public static final ModuleDeployments MODULE_DEPLOYMENTS = new ModuleDeployments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModuleDeploymentsRecord> getRecordType() {
        return ModuleDeploymentsRecord.class;
    }

    /**
     * The column <code>module_deployments.id</code>.
     */
    public final TableField<ModuleDeploymentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>module_deployments.customer_id</code>.
     */
    public final TableField<ModuleDeploymentsRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>module_deployments.deployment_location</code>.
     */
    public final TableField<ModuleDeploymentsRecord, String> DEPLOYMENT_LOCATION = createField(DSL.name("deployment_location"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>module_deployments.module_id</code>.
     */
    public final TableField<ModuleDeploymentsRecord, Integer> MODULE_ID = createField(DSL.name("module_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>module_deployments.version_no</code>.
     */
    public final TableField<ModuleDeploymentsRecord, String> VERSION_NO = createField(DSL.name("version_no"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>module_deployments.applied_date</code>.
     */
    public final TableField<ModuleDeploymentsRecord, LocalDate> APPLIED_DATE = createField(DSL.name("applied_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>module_deployments.applied_by</code>.
     */
    public final TableField<ModuleDeploymentsRecord, String> APPLIED_BY = createField(DSL.name("applied_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>module_deployments.comments</code>.
     */
    public final TableField<ModuleDeploymentsRecord, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>module_deployments.previous_mod_deployment_id</code>.
     */
    public final TableField<ModuleDeploymentsRecord, Integer> PREVIOUS_MOD_DEPLOYMENT_ID = createField(DSL.name("previous_mod_deployment_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>module_deployments.created_date</code>.
     */
    public final TableField<ModuleDeploymentsRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>module_deployments.last_updated_time</code>.
     */
    public final TableField<ModuleDeploymentsRecord, LocalDateTime> LAST_UPDATED_TIME = createField(DSL.name("last_updated_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>module_deployments.status</code>.
     */
    public final TableField<ModuleDeploymentsRecord, ModuleDeploymentsStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(8).asEnumDataType(hms.commons.rnm.db.schema.enums.ModuleDeploymentsStatus.class), this, "");

    private ModuleDeployments(Name alias, Table<ModuleDeploymentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModuleDeployments(Name alias, Table<ModuleDeploymentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>module_deployments</code> table reference
     */
    public ModuleDeployments(String alias) {
        this(DSL.name(alias), MODULE_DEPLOYMENTS);
    }

    /**
     * Create an aliased <code>module_deployments</code> table reference
     */
    public ModuleDeployments(Name alias) {
        this(alias, MODULE_DEPLOYMENTS);
    }

    /**
     * Create a <code>module_deployments</code> table reference
     */
    public ModuleDeployments() {
        this(DSL.name("module_deployments"), null);
    }

    public <O extends Record> ModuleDeployments(Table<O> child, ForeignKey<O, ModuleDeploymentsRecord> key) {
        super(child, key, MODULE_DEPLOYMENTS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ModuleDeploymentsRecord, Integer> getIdentity() {
        return (Identity<ModuleDeploymentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ModuleDeploymentsRecord> getPrimaryKey() {
        return Keys.KEY_MODULE_DEPLOYMENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ModuleDeploymentsRecord>> getKeys() {
        return Arrays.<UniqueKey<ModuleDeploymentsRecord>>asList(Keys.KEY_MODULE_DEPLOYMENTS_PRIMARY);
    }

    @Override
    public ModuleDeployments as(String alias) {
        return new ModuleDeployments(DSL.name(alias), this);
    }

    @Override
    public ModuleDeployments as(Name alias) {
        return new ModuleDeployments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModuleDeployments rename(String name) {
        return new ModuleDeployments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModuleDeployments rename(Name name) {
        return new ModuleDeployments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, String, Integer, String, LocalDate, String, String, Integer, LocalDateTime, LocalDateTime, ModuleDeploymentsStatus> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
