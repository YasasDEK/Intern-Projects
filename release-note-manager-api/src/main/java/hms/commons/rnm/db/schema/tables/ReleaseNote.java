/*
 * This file is generated by jOOQ.
 */
package hms.commons.rnm.db.schema.tables;


import hms.commons.rnm.db.schema.DefaultSchema;
import hms.commons.rnm.db.schema.Keys;
import hms.commons.rnm.db.schema.tables.records.ReleaseNoteRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReleaseNote extends TableImpl<ReleaseNoteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>release_note</code>
     */
    public static final ReleaseNote RELEASE_NOTE = new ReleaseNote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReleaseNoteRecord> getRecordType() {
        return ReleaseNoteRecord.class;
    }

    /**
     * The column <code>release_note.id</code>.
     */
    public final TableField<ReleaseNoteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>release_note.module_id</code>.
     */
    public final TableField<ReleaseNoteRecord, Integer> MODULE_ID = createField(DSL.name("module_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>release_note.version_no</code>.
     */
    public final TableField<ReleaseNoteRecord, String> VERSION_NO = createField(DSL.name("version_no"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>release_note.release_by</code>.
     */
    public final TableField<ReleaseNoteRecord, String> RELEASE_BY = createField(DSL.name("release_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>release_note.branch</code>.
     */
    public final TableField<ReleaseNoteRecord, String> BRANCH = createField(DSL.name("branch"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>release_note.release_date</code>.
     */
    public final TableField<ReleaseNoteRecord, LocalDate> RELEASE_DATE = createField(DSL.name("release_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>release_note.apply_on_top_of_version</code>.
     */
    public final TableField<ReleaseNoteRecord, String> APPLY_ON_TOP_OF_VERSION = createField(DSL.name("apply_on_top_of_version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>release_note.dependant_version</code>.
     */
    public final TableField<ReleaseNoteRecord, JSON> DEPENDANT_VERSION = createField(DSL.name("dependant_version"), SQLDataType.JSON, this, "");

    /**
     * The column <code>release_note.status</code>.
     */
    public final TableField<ReleaseNoteRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>release_note.build_instructions</code>.
     */
    public final TableField<ReleaseNoteRecord, String> BUILD_INSTRUCTIONS = createField(DSL.name("build_instructions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>release_note.fixed_bugs</code>.
     */
    public final TableField<ReleaseNoteRecord, String> FIXED_BUGS = createField(DSL.name("fixed_bugs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>release_note.known_issues</code>.
     */
    public final TableField<ReleaseNoteRecord, String> KNOWN_ISSUES = createField(DSL.name("known_issues"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>release_note.deployment_details</code>.
     */
    public final TableField<ReleaseNoteRecord, String> DEPLOYMENT_DETAILS = createField(DSL.name("deployment_details"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>release_note.areas_to_be_tested</code>.
     */
    public final TableField<ReleaseNoteRecord, String> AREAS_TO_BE_TESTED = createField(DSL.name("areas_to_be_tested"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>release_note.reference_docs</code>.
     */
    public final TableField<ReleaseNoteRecord, String> REFERENCE_DOCS = createField(DSL.name("reference_docs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>release_note.created_date</code>.
     */
    public final TableField<ReleaseNoteRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>release_note.last_updated_time</code>.
     */
    public final TableField<ReleaseNoteRecord, LocalDateTime> LAST_UPDATED_TIME = createField(DSL.name("last_updated_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>release_note.feature_summary</code>.
     */
    public final TableField<ReleaseNoteRecord, String> FEATURE_SUMMARY = createField(DSL.name("feature_summary"), SQLDataType.CLOB, this, "");

    private ReleaseNote(Name alias, Table<ReleaseNoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReleaseNote(Name alias, Table<ReleaseNoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>release_note</code> table reference
     */
    public ReleaseNote(String alias) {
        this(DSL.name(alias), RELEASE_NOTE);
    }

    /**
     * Create an aliased <code>release_note</code> table reference
     */
    public ReleaseNote(Name alias) {
        this(alias, RELEASE_NOTE);
    }

    /**
     * Create a <code>release_note</code> table reference
     */
    public ReleaseNote() {
        this(DSL.name("release_note"), null);
    }

    public <O extends Record> ReleaseNote(Table<O> child, ForeignKey<O, ReleaseNoteRecord> key) {
        super(child, key, RELEASE_NOTE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ReleaseNoteRecord> getPrimaryKey() {
        return Keys.KEY_RELEASE_NOTE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ReleaseNoteRecord>> getKeys() {
        return Arrays.<UniqueKey<ReleaseNoteRecord>>asList(Keys.KEY_RELEASE_NOTE_PRIMARY);
    }

    @Override
    public ReleaseNote as(String alias) {
        return new ReleaseNote(DSL.name(alias), this);
    }

    @Override
    public ReleaseNote as(Name alias) {
        return new ReleaseNote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReleaseNote rename(String name) {
        return new ReleaseNote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReleaseNote rename(Name name) {
        return new ReleaseNote(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, Integer, String, String, String, LocalDate, String, JSON, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
